{"version":3,"sources":["component/Service.js","component/ProjectSearch.js","component/ProjectsList.js","component/NewProject.js","component/ProjectChart.js","component/TaskChart.js","component/Main.js","component/SideNav.js","component/TopNav.js","component/UpdateTask.js","component/TaskModal.js","component/Project.js","component/UpdateProject.js","component/AddTask.js","component/UpdateTaskList.js","component/TaskSearch.js","component/TasksList.js","App.js","serviceWorker.js","index.js"],"names":["proxy","axios","get","projectId","delete","project","put","post","patch","taskId","task","search","ProjectSearch","props","inputChange","e","setState","target","name","value","submitForm","event","preventDefault","Service","searchProject","state","then","res","data","console","log","results","refreshTasks","window","location","reload","onSubmit","this","className","type","placeholder","aria-label","onChange","onClick","projects","Component","ProjectsList","changeBtnColor","status","createProject","history","push","generalTasks","id","tasks","filter","length","inprogressTasks","t","taskState","doneTasks","sortedprojects","sort","a","b","message","getProjects","bind","getTasks","result","exportProjects","response","csvdata","URL","createObjectURL","Blob","downloadedDocument","document","createElement","href","download","body","appendChild","click","deleteProject","respose","title","scope","map","i","key","projectTitle","projectStatus","to","Provider","NewProject","errors","projectDescription","projectPriority","validate","error","htmlFor","rows","ProjectChart","options","labels","series","width","TaskChart","Main","SideNav","style","backgroundColor","color","TopNav","UpdateTask","showModal","show","hideModal","updateTask","taskTitle","taskDescription","taskPriority","refresh","getTaskByTaskId","Modal","size","aria-labelledby","centered","onHide","Header","closeButton","Title","Body","selected","disabled","hidden","Footer","Button","variant","TaskModal","changePriorityColor","priority","changeStateColor","updateTaskInprogress","updateTaskDone","updateTaskTodo","deleteTask","created","updated","updateTodo","updateInprogress","updateDone","Project","todoTaskList","inprogressTaskList","doneTaskList","changeProjectStatus","getProject","match","params","getTasksByProjectId","componentDidMount","exportTasks","csvTasks","updateProjectCompleted","updateCompleted","UpdateProject","updateForm","updateProject","AddTask","addTask","required","defaultValue","TaskSearch","searchTask","input","TasksList","UpdateTaskList","App","path","exact","component","Boolean","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.cdec94a4.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst proxy = 'https://project-task-system.herokuapp.com';\n\nclass Service {\n    getProjects() {\n        return axios.get(proxy + `/api/projects`);\n    }\n    getProject(projectId) {\n        return axios.get(proxy + `/api/projects/${projectId}`);\n    }\n    deleteProject(projectId) {\n        return axios.delete(proxy + `/api/projects/${projectId}`);\n    }\n    updateProject(projectId, project) {\n        return axios.put(proxy + `/api/projects/${projectId}`, project);\n    }\n    createProject(project) {\n        return axios.post(proxy + `/api/projects`, project);\n    }\n    updateProjectCompleted(projectId) {\n        return axios.patch(proxy + `/api/projects/${projectId}/completed`)\n    }\n    // Task axios \n    getTasksByProjectId(projectId) {\n        return axios.get(proxy + `/api/projects/${projectId}/tasks`);\n    }\n    getTasks() {\n        return axios.get(proxy + `/api/projects/tasks`);\n    }\n    getTaskByTaskId(taskId) {\n        return axios.get(proxy + `/api/projects/tasks/${taskId}`);\n    }\n    getTasksInProgress() {\n        return axios.get(proxy + `/api/projects/tasks/inprogress`);\n    }\n    getTasksTodo() {\n        return axios.get(proxy + `/api/projects/tasks/todo`);\n    }\n    getTasksDone() {\n        return axios.get(proxy + `/api/projects/tasks/done`);\n    }\n    addTask(projectId, task) {\n        return axios.post(proxy + `/api/projects/${projectId}/tasks`, task);\n    }\n    deleteTask(taskId) {\n        return axios.delete(proxy + `/api/projects/tasks/${taskId}`);\n    }\n    updateTask(taskId, task) {\n        return axios.put(proxy + `/api/projects/tasks/${taskId}`, task)\n    }\n    updateTaskInprogress(taskId) {\n        return axios.patch(proxy + `/api/projects/tasks/${taskId}/inprogress`)\n    }\n    updateTaskDone(taskId) {\n        return axios.patch(proxy + `/api/projects/tasks/${taskId}/done`)\n    }\n    updateTaskTodo(taskId) {\n        return axios.patch(proxy + `/api/projects/tasks/${taskId}/todo`)\n    }\n    searchProject(search) {\n        return axios.get(proxy + `/api/projects/searchproject?search=${search}`)\n    }\n    searchTask(search) {\n        return axios.get(proxy + `/api/projects/searchtask?search=${search}`)\n    }\n    exportProjects() {\n        return axios.get(proxy + `/api/projects/exportProjects`);\n    }\n    exportTasks(projectId) {\n        return axios.get(proxy + `/api/projects/exportTasks/${projectId}`);\n    }\n\n}\n\nexport default new Service()","import React, {Component} from 'react';\nimport Service from './Service';\n\nclass ProjectSearch extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            searchProject: '',\n            results: []\n        }\n    }\n\n    inputChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    submitForm = (event) => {\n        event.preventDefault();\n        Service.searchProject(this.state.searchProject)\n            .then((res) => {\n                const data = res.data;\n                console.log(data);\n                \n                this.setState({\n                    results: data\n                })\n                console.log(data);\n                this.props.search(data);     \n            })      \n    }\n\n    refreshTasks = () => {\n        window.location.reload(false);\n    };\n\n    render() {\n        return (\n        <div>\n            <form onSubmit={this.submitForm} className=\"form-inline my-2 my-lg-0\">\n                <input name=\"searchProject\" className=\"form-control mr-sm-2\" type=\"search\" \n                placeholder=\"Search for...\" aria-label=\"Search\"\n                onChange={this.inputChange} />\n                <button className=\"btn button-color-info my-2 my-sm-0 float-right\" type=\"reset\"\n                onClick={() => this.refreshTasks(this.state.projects)} >Back to List</button>                 \n            </form>\n        </div>\n        )\n    }\n} \n\nexport default ProjectSearch","import React, { Component } from 'react';\nimport '../App.css';\nimport Service from './Service';\nimport { FaEdit, FaTrashAlt, FaPlusSquare, FaFileAlt, FaFileExport } from \"react-icons/fa\";\nimport {Link} from 'react-router-dom';\nimport ProjectSearch from './ProjectSearch';\nimport { IconContext } from \"react-icons\";\n\n\nclass ProjectsList extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            sortedprojects: [],\n            tasks: [],\n            message: null\n    }\n    this.getProjects = this.getProjects.bind(this);\n}\n\n    componentDidMount() {\n        this.getProjects();\n       \n        Service.getTasks()\n        .then((result) => {\n            const tasks = result.data;\n            console.log(tasks);\n            this.setState({tasks});\n        })\n    }\n\n    getProjects() {\n    Service.getProjects()\n        .then(result => {\n            console.log(result);\n            const projects = result.data;\n            const sortedprojects = projects.sort(function(a, b) {\n                return b.projectId - a.projectId;\n            });\n            console.log(sortedprojects);\n            this.setState({sortedprojects});\n        })\n    }\n\n    exportProjects() {\n        Service.exportProjects()\n        .then(\n            response => {\n                console.log(response);\n                var csvdata = window.URL.createObjectURL(new Blob([response.data]));\n                console.log(csvdata);\n                var downloadedDocument= document.createElement(\"a\");\n                console.log(downloadedDocument);\n                downloadedDocument.href = csvdata;\n                downloadedDocument.target = \"_blank\";\n                downloadedDocument.download = \"Projects.csv\";\n                document.body.appendChild(downloadedDocument);\n                downloadedDocument.click();\n            }\n        )\n    }\n\n    changeBtnColor = (status) => {\n        return status === 'INPROGRESS'? \"badge badge-danger\": \n                status === 'COMPLETED'? \"badge badge-success\": \"badge badge-warning\";    \n    };\n\n    createProject = () => {\n         this.props.history.push(`/api/projects/new`);\n    }\n\n    deleteProject(projectId) {\n        Service.deleteProject(projectId)\n            .then(respose => {this.getProjects()})\n    }\n\n    generalTasks = (id) => {\n        return this.state.tasks.filter(task => task.project.projectId === id).length;\n        // console.log(this.state.tasks.filter(task => task.project.projectId == id).length);\n    }\n    inprogressTasks = (id) => {\n        return this.state.tasks.filter(task => task.project.projectId === id)\n        .filter(t => t.taskState === \"INPROGRESS\").length;\n    }\n    doneTasks = (id) => {\n        return this.state.tasks.filter(task => task.project.projectId === id)\n        .filter(t => t.taskState === \"DONE\").length;\n    }\n\n    search = (projects) => {\n        console.log(projects);\n        const sortedprojects = projects.sort(function(a, b) {\n            return b.projectId - a.projectId;\n        });\n        console.log(sortedprojects);\n        this.setState({sortedprojects});\n    }\n\n    render() {\n        return (\n            <div className=\"content-container\">\n                \n                <h3 className=\"text-center header mt-3 mb-3\">List of Projects</h3>\n                \n                    <div className=\"icon-display\">\n                        {/* <IconContext.Provider value={{ className: \"icon-class-1\" }} className=\"pr-10px\" > */}\n                            <div>\n                                <FaPlusSquare onClick = {() => this.createProject()} title=\"Create new project\" \n                                className=\"icon-class-1\" />\n                            </div>\n                        {/* </IconContext.Provider> */}\n\n                        {/* <IconContext.Provider value={{ className: \"icon-class-1\" }}  > */}\n                            <div>\n                                <FaFileExport onClick = {() => this.exportProjects()} title=\"Export projects\" \n                                className=\"icon-class-1\" />\n                            </div>\n                        {/* </IconContext.Provider> */}\n                    </div>\n                    <div className=\"float-right\">\n                <ProjectSearch search={this.search}/>\n                </div>\n\n                <table className=\"table\">\n                    <thead className=\"thead-primary\">\n                        <tr>\n                        <th scope=\"col\">#</th>\n                        <th scope=\"col\">Title</th>\n                        <th scope=\"col\">Status</th>\n                        <th scope=\"col\">Progress</th>\n                        <th scope=\"col\">View</th>\n                        <th scope=\"col\">Edit</th>\n                        <th scope=\"col\">Delete</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                    {this.state.sortedprojects.map((project, i) =>\n                        <tr key={project.projectId}>\n                            <th scope=\"row\">{i+1}</th>\n                            <td>{project.projectTitle}</td>\n                            <td>\n                                <span className={this.changeBtnColor(project.projectStatus)}>\n                                {project.projectStatus}</span></td>\n                            <td>{this.generalTasks(project.projectId)}/\n                            {this.inprogressTasks(project.projectId)}/\n                            {this.doneTasks(project.projectId)}</td>  \n                            <td>\n                                \n                                <Link to={`/api/projects/${project.projectId}`}>\n                                <IconContext.Provider value={{ className: \"icon-class\" }}  >\n                                    <div>\n                                        <FaFileAlt />\n                                    </div>\n                                </IconContext.Provider>\n                                </Link>\n                            </td>\n                            <td>\n                               \n                                <Link to={`/api/projects/update/${project.projectId}`}>\n                                <IconContext.Provider value={{ className: \"icon-class\" }}  >\n                                    <div>\n                                        <FaEdit />\n                                    </div>\n                                </IconContext.Provider>\n                                </Link>\n                            </td>\n                            <td>\n                               \n                                <IconContext.Provider value={{ className: \"icon-class\" }}>\n                                    <div>\n                                        <FaTrashAlt onClick={() => this.deleteProject(project.projectId)} />\n                                    </div>\n                                </IconContext.Provider>\n                            </td>\n                        </tr>\n                        )}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n    \n\n}\n\nexport default ProjectsList","import React, { Component } from 'react';\nimport '../App.css';\nimport Service from './Service';\n\nfunction validate(projectTitle, projectDescription, projectPriority) {\n    const errors = [];\n    if (projectTitle.length === 0) {\n        errors.push(\"Fill out the Project title\");\n    }\n    if (projectTitle.length > 0 && projectTitle.length < 5) {\n        errors.push(\"Length of Project title should be from 5 to 100 characters.\");\n    }\n    if (projectTitle.length > 100) {\n        errors.push(\"Length of Project title should be less than 100 characters.\");\n    }\n    if (projectDescription.length === 0) {\n        errors.push(\"Fill out the Project description\");\n    }\n    if (projectDescription.length > 500) {\n        errors.push(\"Project description length should be less than 500 characters\");\n    }\n    return errors;\n}\n\nclass NewProject extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            projectTitle: '',\n            projectDescription: '',\n            projectStatus: 'NEW',\n            errors: []\n        };\n    }\n\n    inputChange = (event) => {\n        this.setState({[event.target.name]: event.target.value});\n    };\n\n    submitForm = (event) => {\n        event.preventDefault();\n        const {projectTitle, projectDescription} = this.state;\n        const errors = validate(projectTitle, projectDescription);\n        if (errors.length > 0) {\n            this.setState({errors});\n            return;\n        }\n        const data = {\n            projectTitle: this.state.projectTitle,\n            projectDescription: this.state.projectDescription,\n            projectStatus: this.state.projectStatus,\n        };\n\n        Service.createProject(data)\n            .then(result => {this.props.history.push('/api/projects');\n        });\n    }\n\n    render() {\n        const {errors} = this.state;\n        return (\n            <div className=\"content-container\">\n                <h3 className=\"text-center header\">Create new Project</h3>\n                    <form onSubmit={this.submitForm}>\n                        {errors.map(error => (\n                            <p className=\"error-css\" key={error}>Error: {error}</p>\n                        ))}\n                        <div className=\"form-group\">\n                            <label htmlFor=\"projectTitle\">Project Title</label>\n                            <input type=\"text\" className=\"form-control\" id=\"title\" \n                            value={this.state.projectTitle} name=\"projectTitle\" \n                            onChange={this.inputChange} />\n                            {/* {errors.projectTitle.length > 0 && <span className='error'>{errors.projectTitle}</span>} */}\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"projectDescription\">Project Description</label>\n                            <textarea className=\"form-control\" id=\"description\" rows=\"5\" \n                            value={this.state.projectDescription} name=\"projectDescription\" \n                            onChange={this.inputChange}></textarea>\n                            {/* {errors.projectDescription.length > 0 && <span className='error'>{errors.projectDescription}</span>} */}\n                        </div>\n                        <button type=\"submit\" className=\"btn button-color-info\">Submit</button>\n                    </form>\n            </div>\n        );\n    }\n}\n\nexport default NewProject","import React, {Component} from 'react';\nimport ReactApexChart from 'react-apexcharts';\n\n\nclass ProjectChart extends Component {\n    constructor(props) {\n      super(props);\n\n      this.state = {\n\n        options: {\n          labels: ['New', 'InProgress', 'Completed']\n        },\n        series: [3, 3, 0]\n        \n      };\n    }\n\n    render() {\n        return (\n            <div id=\"chart\">\n                <h4>Projects Statistics</h4>\n            <ReactApexChart options={this.state.options} series={this.state.series} type=\"donut\" width=\"400\" />\n            </div>\n        )\n    }\n}\n\nexport default ProjectChart\n","import React, {Component} from 'react';\nimport ReactApexChart from 'react-apexcharts';\n\n\nclass TaskChart extends Component {\n    constructor(props) {\n      super(props);\n\n      this.state = {\n        options: {\n          labels: ['Todo', 'InProgress', 'Done']\n        },\n        series: [9, 6, 5]\n      };\n    }\n\n   \n    render() {\n        return (\n            <div id=\"chart\">\n                <h4>Tasks Statistics</h4>\n            <ReactApexChart options={this.state.options} series={this.state.series} type=\"donut\" width=\"400\" />\n            </div>\n        )\n    }\n}\n\nexport default TaskChart\n","import React, { Component } from 'react';\nimport ProjectChart from './ProjectChart';\nimport TaskChart from './TaskChart';\n\n\nclass Main extends Component {\n    render() {\n        return (\n            <div className=\"content-container\">\n                <div className=\"jumbotron\">\n                    <h1 className=\"display-4\">Project Task Management System</h1>\n                    <hr className=\"my-4\" />\n                    <div className=\"chart-display\">\n                    <ProjectChart />\n                    <TaskChart />\n                    </div>\n                </div>\n            </div>\n        );\n      }\n    \n\n}\n\nexport default Main","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport '../App.css';\n\nfunction SideNav(props) {\n\n    return (\n        <nav className=\"sidebar-container\" style={{backgroundColor: '#D3E3FC', color: '#374785'}}>\n            <p className=\"logo\" style={{color: '#374785'}}>ProTaMa</p> \n            <ul className=\"sidebar-navigation\">\n                {/* <li className=\"header\">Navigation</li> */}\n                <li >\n                    <Link className=\"navigation-style\" to=\"/api/main\">Homepage</Link>\n                </li>\n                <li>\n                    <Link className=\"navigation-style\" to=\"/api/projects\">Projects</Link>\n                </li>\n                <li>\n                    <Link className=\"navigation-style\" to=\"/api/projects/new\">New project</Link>\n                </li>\n                <li>\n                    <Link className=\"navigation-style\" to=\"/api/projects/tasks\">Tasks</Link>\n                </li>\n                {/* <li>Information</li> */}\n            </ul>\n            \n        </nav>\n    ); \n\n}\n\nexport default SideNav","import React from 'react';\nimport '../App.css';\n\nfunction TopNav(props) {\n    return (\n        <div>\n            <div className=\"topbar-logo\">\n                Dashboard\n            </div>\n\n        </div>\n    ); \n}\n\n export default TopNav","import React, {Component} from 'react';\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { FaEdit } from \"react-icons/fa\";\nimport Service from \"./Service\";\n\nclass UpdateTask extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            taskId: this.props.taskId,\n            taskTitle: '',\n            taskDescription: '',\n            taskPriority: '',\n            taskState: '', \n        }\n\n        this.state = {\n            show: false,\n        };\n    }\n\n    componentDidMount() {\n        Service.getTaskByTaskId(this.props.task.taskId)\n        .then(response => this.setState({\n            taskTitle: response.data.taskTitle,\n            taskDescription: response.data.taskDescription,\n            taskPriority: response.data.taskPriority,\n            taskState: response.data.taskState\n        }))\n    }\n\n    showModal = () => {\n        this.setState({\n            show: true,\n        });\n    }\n\n    hideModal = () => {\n        this.setState({\n            show: false,\n        });\n    }\n\n    inputChange = (event) => {\n        this.setState({[event.target.name]: event.target.value,});\n    };\n\n    updateTask = (event) => {\n        event.preventDefault();\n        const task = {\n            taskId: this.state.taskId,\n            taskTitle: this.state.taskTitle,\n            taskDescription: this.state.taskDescription,\n            taskPriority: this.state.taskPriority,\n            taskState: this.state.taskState,\n            project: this.state.project,\n        };\n\n        Service.updateTask(this.props.task.taskId, task)\n        .then(respose => {this.props.refresh()});\n    }\n\n    render() {\n        \n        // console.log(task)\n        // const { taskTitle, taskDescription, taskPriority, taskState} = this.props.task;\n        return (\n            <>\n                <button className=\"btn btn-info btn-size\" onClick={this.showModal}>\n                    <FaEdit title=\"Update Task\" />\n                </button>\n                <Modal \n                    size=\"lg\"\n                    aria-labelledby=\"contained-modal-title-vcenter\"\n                    centered\n                    show={this.state.show} onHide={this.hideModal}>\n                        <Modal.Header closeButton>\n                            <Modal.Title>Update Task</Modal.Title>\n                        </Modal.Header>\n                        <form onSubmit={this.updateTask}>\n                            <Modal.Body>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"taskTitle\">Task Title</label>\n                                    <input type=\"text\" className=\"form-control\" id=\"title\" \n                                    value={this.state.taskTitle} name=\"taskTitle\" onChange={this.inputChange} />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"taskDescription\">Task Description</label>\n                                    <textarea className=\"form-control\" id=\"description\" rows=\"3\" \n                                    value={this.state.taskDescription} name=\"taskDescription\" onChange={this.inputChange}></textarea>\n                                </div>\n                            \n                                <div className=\"form-group\">\n                                    <label htmlFor=\"taskPriority\">Task Priority</label>\n                                    <select className=\"form-control\" id=\"priority\"\n                                    value={this.state.taskPriority} name=\"taskPriority\" onChange={this.inputChange}>\n                                        <option value=\"\" selected disabled hidden>Choose Priority</option>\n                                        <option value=\"LOW\">LOW</option>\n                                        <option value=\"MEDIUM\">MEDIUM</option>\n                                        <option value=\"HIGHT\">HIGHT</option>\n                                    </select>\n                                </div>\n\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"taskState\">Task State</label>\n                                    <select className=\"form-control\" id=\"state\"\n                                    value={this.state.taskState} name=\"taskState\" onChange={this.inputChange}>\n                                        <option value=\"\" selected disabled hidden>Choose State</option>\n                                        <option value=\"TODO\">TODO</option>\n                                        <option value=\"INPROGRESS\">INPROGRESS</option>\n                                        <option value=\"DONE\">DONE</option>\n                                    </select>\n                                </div>\n                            </Modal.Body>\n                            <Modal.Footer>\n                                <Button variant=\"secondary\" onClick={this.hideModal}>Cancel</Button>\n                                <Button variant=\"primary\" onClick={this.hideModal} \n                                type=\"submit\">Save changes</Button>\n                            </Modal.Footer>\n                        </form>\n                </Modal>\n            </>\n        )\n\n    }\n}\n\nexport default UpdateTask\n\n\n","import React, { Component } from 'react';\nimport '../App.css';\nimport Modal from 'react-bootstrap/Modal';\nimport { FaTrashAlt } from \"react-icons/fa\";\nimport UpdateTask from './UpdateTask';\nimport Service from './Service';\n\nclass TaskModal extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n          show: false, \n        };\n    }\n\n    showModal = () => {\n        this.setState({\n            show: true\n        });\n    };\n\n    hideModal = () => {\n        this.setState({\n            show: false\n        })\n    }\n\n    updateInprogress(taskId) {\n      Service.updateTaskInprogress(taskId)\n          .then(response => {this.props.refresh()})\n    }\n    updateDone(taskId) {\n      Service.updateTaskDone(taskId)\n          .then(response => {this.props.refresh()})\n    }\n    updateTodo(taskId) {\n      Service.updateTaskTodo(taskId)\n          .then(response => {this.props.refresh()})\n    }\n\n    changePriorityColor = (priority) => {\n      return priority === 'HIGHT'? \"badge badge-danger float-left mr-2\": \n              priority === 'LOW'? \"badge badge-success float-left mr-2\": \"badge badge-warning float-left mr-2\";\n    }\n\n    changeStateColor = (state) => {\n      return state === 'TODO'? \"badge badge-danger float-left mr-2\": \n              state === 'DONE'? \"badge badge-success float-left mr-2\": \"badge badge-warning float-left mr-2\";\n    }\n\n    deleteTask(taskId) {\n      Service.deleteTask(taskId)\n          .then(respose => {this.props.refresh()})\n    }\n    \n    render() {\n        const { taskId, taskTitle, taskDescription, taskPriority, taskState, created, updated } = this.props.task;\n        return (\n          <>\n            <div className=\"task-button btn\" onClick={this.showModal}>\n            {taskTitle}\n            </div>\n    \n            <Modal show={this.state.show} onHide={this.hideModal} centered>\n              <Modal.Header closeButton>\n                <Modal.Title>\n                  #{taskId},   {taskTitle}\n                </Modal.Title>\n              </Modal.Header>\n              <Modal.Body>\n                <span className={this.changePriorityColor(taskPriority)} >{taskPriority}</span>\n                <span className={this.changeStateColor(taskState)}>{taskState}</span><br></br> \n                <hr></hr>\n                {taskDescription}\n                <hr></hr>\n                Created at: {created}\n                <hr></hr>\n                Updated at: {updated}              \n              </Modal.Body>\n              <Modal.Footer>\n                <div className=\"btn-display\">\n                  <UpdateTask task={this.props.task} refresh={this.props.refresh} />\n                  <button className=\"btn btn-info btn-size\" \n                    onClick={() => this.deleteTask(taskId)}><FaTrashAlt title=\"Delete Task\" />\n                  </button>\n                  <button className=\"btn btn-info mt-3 mb-3 ml-1 mr-1\" \n                    onClick={() => this.updateTodo(taskId)}>\n                    TODO\n                  </button>\n                  <button className=\"btn btn-info mt-3 mb-3 ml-1 mr-1\" \n                    onClick={() => this.updateInprogress(taskId)}>\n                    INPROGRESS\n                  </button>\n                  <button className=\"btn btn-info mt-3 mb-3 ml-1 mr-1\" \n                    onClick={() => this.updateDone(taskId)}>\n                    DONE\n                  </button>\n                  <button className=\"btn btn-info mt-3 mb-3 ml-1 mr-1\" onClick={this.hideModal}>\n                    Close\n                  </button>  \n                </div>  \n              </Modal.Footer>\n            </Modal>\n          </>\n        );\n      }\n\n}\n\nexport default TaskModal","import React, { Component } from 'react';\nimport Service from './Service';\nimport '../App.css';\nimport {Link} from 'react-router-dom';\nimport TaskModal from './TaskModal';\n\nclass Project extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            project: {},\n            tasks: []\n        }\n        this.refresh = this.refresh.bind(this);\n    }\n\n    componentDidMount() {\n        Service.getProject(this.props.match.params.projectId)\n        .then((result) => {\n            const project = result.data;\n            console.log(project);\n            this.setState({project});\n        });\n\n        Service.getTasksByProjectId(this.props.match.params.projectId)\n        .then((result) => {\n            const tasks = result.data;\n            console.log(tasks);\n            this.setState({tasks});\n        })\n    }\n\n    refresh() {\n        this.componentDidMount();\n    }\n\n    changeBtnColor = (status) => {\n        return status === 'INPROGRESS'? \"badge badge-danger\": \n                status === 'COMPLETED'? \"badge badge-success\": \"badge badge-warning\";    \n    };\n\n    todoTaskList = (tasks) => {\n        console.log(tasks)\n        return tasks.filter(task => task.taskState === \"TODO\");\n    }\n\n    inprogressTaskList = (tasks) => {\n        return tasks.filter(task => task.taskState === \"INPROGRESS\");\n    }\n\n    doneTaskList = (tasks) => {\n        return tasks.filter(task => task.taskState === \"DONE\");\n    }\n\n    changePriorityColor = (priority) => {\n        return priority === 'HIGHT'? \"badge badge-danger float-right\": \n                priority === 'LOW'? \"badge badge-success float-right\": \"badge badge-warning float-right\";\n    }\n\n    deleteTask(taskId) {\n        Service.deleteTask(taskId)\n            .then(respose => {this.componentDidMount()})\n    }\n\n    changeProjectStatus = (tasks) => {\n        if (tasks.length === this.doneTaskList(tasks).length) {\n            this.setState({\n                projectStatus: \"COMPLETED\"\n            })\n        }\n        else if (this.todoTaskList(tasks) <= 0 && this.inprogressTaskList(tasks) <= 0 && this.doneTaskList(tasks) <= 0) {\n            this.setState({\n                projectStatus: \"NEW\"\n            })\n        }\n        else {\n            this.setState({\n                projectStatus: \"INPROGRESS\"\n            })\n        }\n    }\n\n    exportTasks(projectId) {\n        Service.exportTasks(projectId)\n            .then(\n                response => {\n                    console.log(response);\n                    var csvTasks = window.URL.createObjectURL(new Blob([response.data]));\n                    console.log(csvTasks);\n                    var downloadedDocument= document.createElement(\"a\");\n                    console.log(downloadedDocument);\n                    downloadedDocument.href = csvTasks;\n                    console.log()\n                    downloadedDocument.target = \"_blank\";\n                    downloadedDocument.download = \"Tasks.csv\";\n                    document.body.appendChild(downloadedDocument);\n                    downloadedDocument.click();\n                }\n            )\n    }\n\n    updateInprogress(taskId) {\n        Service.updateTaskInprogress(taskId)\n            .then(response => {this.refresh()})\n    }\n\n    updateDone(taskId) {\n        Service.updateTaskDone(taskId)\n            .then(response => {this.refresh()})\n    }\n\n    updateTodo(taskId) {\n        Service.updateTaskTodo(taskId)\n            .then(response => {this.refresh()})\n    }\n\n    updateCompleted(projectId) {\n        Service.updateProjectCompleted(projectId)\n            .then(response => {this.refresh()})\n    }\n\n\n    render() {\n        const {projectId, projectTitle, projectDescription, projectStatus} = this.state.project;\n        return (\n            <div className=\"content-container\">\n                <h3 className=\"text-center header\">Project details</h3>\n                <div className=\"card card-margin\">    \n                    <div className=\"card-header\" >\n                        <span className={this.changeBtnColor(projectStatus)}>{projectStatus}</span>\n                    </div>\n                    <div className=\"card-body\">\n                        <h5 className=\"card-title\">{projectTitle}</h5>\n                        <p className=\"card-text\">{projectDescription}</p>\n                    </div> \n                </div>\n\n                <Link to={`/api/projects/${projectId}/tasks/new`}>\n                    <button className=\"btn button-color btn-lg\">\n                        Add Task\n                    </button>\n                </Link>\n                <Link to={`/api/projects/update/${projectId}`}>\n                    <button className=\"btn button-color btn-lg\">\n                        Update Project\n                    </button>\n                </Link>\n                <button className=\"btn button-color btn-lg\" onClick={() => this.updateCompleted(projectId)}>\n                    Mark as Completed\n                </button>\n                <button className=\"btn button-color btn-lg\" onClick={() => this.exportTasks(projectId)}>\n                   Export Tasks\n                </button>\n\n                    {/* Tasks List by status  */}\n                    <h4 className=\"text-center mt-3 mb-3 header\">Tasks</h4>\n                    {/* <div>{this.state.tasks.length > 0 && ( */}\n                        <div className=\"row\">\n                            {/* TO DO List */}\n                            <div className=\"col-4\">\n                                <div>{this.todoTaskList(this.state.tasks).length > 0 && (\n                                    <div>\n                                        <h5 className=\"text-center header\">TODO</h5>\n                                        {this.todoTaskList(this.state.tasks).map(task => \n                                            <div key={task.taskId}>\n                                                <TaskModal refresh={this.refresh} task={task}/> \n                                            </div>\n                                        )}      \n                                    </div>\n                                )}\n                                </div>\n                            </div>\n\n                            {/* IN PROGRESS list */}\n                            <div className=\"col-4\">\n                                <div>{this.inprogressTaskList(this.state.tasks).length > 0 && (\n                                    <div>\n                                        <h5 className=\"text-center header\">INPROGRESS</h5>\n                                            {this.inprogressTaskList(this.state.tasks).map(task => \n                                                <div key={task.taskId}>\n                                                    <TaskModal refresh={this.refresh} task={task}/> \n                                                </div>\n                                            )}\n                                    </div>\n                                )}\n                                </div>\n                            </div>\n\n                            {/* DONE List */}\n                            <div className=\"col-4\">\n                                <div>{this.doneTaskList(this.state.tasks).length > 0 && (\n                                    <div>\n                                        <h5 className=\"text-center header\">DONE</h5> \n                                            {this.doneTaskList(this.state.tasks).map(task => \n                                                <div key={task.taskId}>\n                                                    <TaskModal refresh={this.refresh} task={task}/>  \n                                                </div>\n                                            )}\n                                    </div>\n                                )}\n                                </div>\n                            </div>\n                        </div>\n            </div>\n        )\n    }\n}\n\nexport default Project\n\n","import React, { Component } from 'react';\nimport Service from './Service';\n\nclass UpdateProject extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            projectId: this.props.match.params.projectId,\n            projectTitle: '',\n            projectDescription: '',\n            projectStatus: ''\n        }\n    }\n\n    componentDidMount() {\n        Service.getProject(this.state.projectId)\n        .then(response => this.setState({\n            projectTitle: response.data.projectTitle,\n            projectDescription: response.data.projectDescription,\n            projectStatus: response.data.projectStatus\n        }))\n    }\n    inputChange = (event) => {\n        this.setState({[event.target.name]: event.target.value,});\n    };\n\n    updateForm = (event) => {\n        event.preventDefault();\n        const project = {\n            projectId: this.state.projectId,\n            projectTitle: this.state.projectTitle,\n            projectDescription: this.state.projectDescription,\n            projectStatus: this.state.projectStatus,\n        };\n\n        Service.updateProject(project.projectId, project)\n            .then(result => {this.props.history.push(`/api/projects`);\n        });\n    }\n\n\n    render() {\n        // const {projectId, projectTitle, projectDescription, projectStatus} = this.state\n        return (\n            <div className=\"content-container\">\n                <h3 className=\"text-center header\">Update Project</h3>\n                    <form onSubmit={this.updateForm}>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"projectTitle\">Project Title</label>\n                            <input type=\"text\" className=\"form-control\" id=\"title\" \n                            value={this.state.projectTitle} name=\"projectTitle\" onChange={this.inputChange} />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"projectDescription\">Project Description</label>\n                            <textarea className=\"form-control\" id=\"description\" rows=\"3\" \n                            value={this.state.projectDescription} name=\"projectDescription\" onChange={this.inputChange}></textarea>\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"projectStatus\">Project Status</label>\n                            <select className=\"form-control\" id=\"status\"\n                            value={this.state.projectStatus} name=\"projectStatus\" onChange={this.inputChange}>\n                                <option value=\"\" selected disabled hidden>Choose Status</option>\n                                <option value=\"NEW\">NEW</option>\n                                <option value=\"INPROGRESS\">INPROGRESS</option>\n                                <option value=\"COMPLETED\">COMPLETED</option>\n                            </select>\n                        </div>\n                        <button type=\"submit\" className=\"btn button-color-info\">Update</button>\n                    </form>\n            </div>\n\n        );\n    }\n}\n\nexport default UpdateProject","import React, { Component } from 'react';\nimport '../App.css';\nimport Service from './Service';\n\nfunction validate(taskTitle, taskDescription, taskPriority) {\n    const errors = [];\n    if (taskTitle.length === 0) {\n        errors.push(\"Fill out the Task title.\");\n    }\n    if (taskTitle.length > 0 && taskTitle.length < 5) {\n        errors.push(\"Length of Task title should be from 5 to 75 characters.\");\n    }\n    if (taskTitle.length > 75) {\n        errors.push(\"Length of Task title should be less than 75 characters.\");\n    }\n    if (taskDescription.length === 0) {\n        errors.push(\"Fill out the Task description.\");\n    }\n    if (taskDescription.length > 500) {\n        errors.push(\"Task description length should be less than 500 characters\");\n    }\n    if (taskPriority.length === 0) {\n        errors.push(\"Choose Task priority\");\n    }\n    return errors;\n}\n\nclass AddTask extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            taskTitle: '',\n            taskDescription: '',\n            taskPriority: '',\n            taskState: 'TODO',\n            projectId: this.props.match.params.projectId,\n            errors: []\n        }\n        console.log(\"Projekto id: \" + this.state.projectId);\n    }\n\n    inputChange = (event) => {\n        this.setState({[event.target.name]: event.target.value});\n    };\n\n    submitForm = (event) => {\n        event.preventDefault();\n        const {taskTitle, taskDescription, taskPriority} = this.state;\n        const errors = validate(taskTitle, taskDescription, taskPriority);\n        if (errors.length > 0) {\n            this.setState({errors});\n            return;\n        }\n        const data = {\n            taskTitle: this.state.taskTitle,\n            taskDescription: this.state.taskDescription,\n            taskPriority: this.state.taskPriority,\n            taskState: this.state.taskState\n        };\n        console.log(data);\n\n        Service.addTask(this.state.projectId, data)\n            .then(() => this.props.history.push(`/api/projects/${this.state.projectId}/tasks`))\n            .then(() => this.props.history.push(`/api/projects/${this.state.projectId}`));   \n    }\n\n    render() {\n        const {errors} = this.state;\n        return (\n            <div className=\"content-container\">\n                <h3 className=\"text-center header\">Add new Task</h3>\n                    <form onSubmit={this.submitForm}>\n                        {errors.map(error => (\n                            <p className=\"error-css\" key={error}>Error: {error}</p>\n                        ))}\n                        <div className=\"form-group\">\n                            <label htmlFor=\"taskTitle\">Task Title</label>\n                            <input type=\"text\" className=\"form-control\" id=\"title\" \n                            value={this.state.taskTitle} name=\"taskTitle\" onChange={this.inputChange} />    \n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"taskDescription\">Task Description</label>\n                            <textarea className=\"form-control\" id=\"description\" rows=\"4\" \n                            // placeholder=\"As a [type of user], I want [an action] so that [a benefit/a value]\"\n                            value={this.state.taskDescription} name=\"taskDescription\" \n                            onChange={this.inputChange}></textarea>\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"taskPriority\">Task Priority</label>\n                            <select className=\"form-control\" id=\"priority\"\n                            name=\"taskPriority\" onChange={this.inputChange} required defaultValue={'DEFAULT'}>\n                                <option value=\"DEFAULT\" disabled>Choose Priority</option>\n                                <option value=\"LOW\">LOW</option>\n                                <option value=\"MEDIUM\">MEDIUM</option>\n                                <option value=\"HIGHT\">HIGHT</option>\n                            </select>\n                        </div>\n                        <button type=\"submit\" className=\"btn button-color-info\">Submit</button>\n                    </form>\n            </div>\n        );\n    }\n}\n\nexport default AddTask","import React, {Component} from 'react';\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { FaEdit } from \"react-icons/fa\";\nimport Service from \"./Service\";\n\nclass UpdateTask extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            taskId: this.props.taskId,\n            taskTitle: '',\n            taskDescription: '',\n            taskPriority: '',\n            taskState: '', \n        }\n\n        this.state = {\n            show: false,\n        };\n    }\n\n    componentDidMount() {\n        Service.getTaskByTaskId(this.props.task.taskId)\n        .then(response => this.setState({\n            taskTitle: response.data.taskTitle,\n            taskDescription: response.data.taskDescription,\n            taskPriority: response.data.taskPriority,\n            taskState: response.data.taskState\n        }))\n    }\n\n    showModal = () => {\n        this.setState({\n            show: true,\n        });\n    }\n\n    hideModal = () => {\n        this.setState({\n            show: false,\n        });\n    }\n\n    inputChange = (event) => {\n        this.setState({[event.target.name]: event.target.value,});\n    };\n\n    updateTask = (event) => {\n        event.preventDefault();\n        const task = {\n            taskId: this.state.taskId,\n            taskTitle: this.state.taskTitle,\n            taskDescription: this.state.taskDescription,\n            taskPriority: this.state.taskPriority,\n            taskState: this.state.taskState,\n            project: this.state.project,\n        };\n\n        Service.updateTask(this.props.task.taskId, task)\n        .then(respose => {this.props.refresh()});\n    }\n\n    render() {\n        \n        // console.log(task)\n        // const { taskTitle, taskDescription, taskPriority, taskState} = this.props.task;\n        return (\n            <>\n                <button className=\"btn btn-info btn-size\" onClick={this.showModal}>\n                    <FaEdit title=\"Update Task\" />\n                </button>\n                <Modal \n                    size=\"lg\"\n                    aria-labelledby=\"contained-modal-title-vcenter\"\n                    centered\n                    show={this.state.show} onHide={this.hideModal}>\n                        <Modal.Header closeButton>\n                            <Modal.Title>Update Task</Modal.Title>\n                        </Modal.Header>\n                        <form onSubmit={this.updateTask}>\n                            <Modal.Body>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"taskTitle\">Task Title</label>\n                                    <input type=\"text\" className=\"form-control\" id=\"title\" \n                                    value={this.state.taskTitle} name=\"taskTitle\" onChange={this.inputChange} />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"taskDescription\">Task Description</label>\n                                    <textarea className=\"form-control\" id=\"description\" rows=\"3\" \n                                    value={this.state.taskDescription} name=\"taskDescription\" onChange={this.inputChange}></textarea>\n                                </div>\n                            \n                                <div className=\"form-group\">\n                                    <label htmlFor=\"taskPriority\">Task Priority</label>\n                                    <select className=\"form-control\" id=\"priority\"\n                                    value={this.state.taskPriority} name=\"taskPriority\" onChange={this.inputChange}>\n                                        <option value=\"\" selected disabled hidden>Choose Priority</option>\n                                        <option value=\"LOW\">LOW</option>\n                                        <option value=\"MEDIUM\">MEDIUM</option>\n                                        <option value=\"HIGHT\">HIGHT</option>\n                                    </select>\n                                </div>\n\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"taskState\">Task State</label>\n                                    <select className=\"form-control\" id=\"state\"\n                                    value={this.state.taskState} name=\"taskState\" onChange={this.inputChange}>\n                                        <option value=\"\" selected disabled hidden>Choose State</option>\n                                        <option value=\"TODO\">TODO</option>\n                                        <option value=\"INPROGRESS\">INPROGRESS</option>\n                                        <option value=\"DONE\">DONE</option>\n                                    </select>\n                                </div>\n                            </Modal.Body>\n                            <Modal.Footer>\n                                <Button variant=\"secondary\" onClick={this.hideModal}>Cancel</Button>\n                                <Button variant=\"primary\" onClick={this.hideModal} \n                                type=\"submit\">Save changes</Button>\n                            </Modal.Footer>\n                        </form>\n                </Modal>\n            </>\n        )\n\n    }\n}\n\nexport default UpdateTask\n\n\n","import React, {Component} from 'react';\nimport Service from './Service';\n\nclass TaskSearch extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            input: '',\n            results: []\n        }\n    }\n    \n    inputChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    submitForm = (event) => {\n        event.preventDefault();\n        Service.searchTask(this.state.input)\n            .then((res) => {\n                const data = res.data;\n                console.log(data);\n                this.setState({\n                    results: data\n                })\n                this.props.search(data);\n            }\n            )\n    }\n\n    refreshTasks = () => {\n        window.location.reload(false);\n    };\n\n    render() {\n        return (\n        <div>\n            <form onSubmit={this.submitForm} className=\"form-inline my-2 my-lg-0 float-right\">\n                <input name=\"input\" className=\"form-control mr-sm-2\" type=\"search\" \n                placeholder=\"Search for...\" aria-label=\"Search\"\n                onChange={this.inputChange} />\n                <button className=\"btn button-color-info my-2 my-sm-0 float-right\" type=\"reset\"\n                onClick={() => this.refreshTasks(this.state.tasks)} >Back to List</button>                \n            </form>\n            \n        </div>\n        )\n    }\n} \n\nexport default TaskSearch","import React, { Component } from 'react';\nimport Service from './Service';\nimport '../App.css';\nimport { FaTrashAlt } from \"react-icons/fa\";\nimport UpdateTaskList from './UpdateTaskList';\nimport TaskSearch from './TaskSearch';\n\n\nclass TasksList extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            // taskstodo: [],\n            // tasksinprogress: [],\n            // tasksdone: []\n            tasks: []\n        }\n        // this.getTasksTodo = this.getTasksTodo.bind(this);\n        // this.getTasksInProgress = this.getTasksInProgress.bind(this); \n        // this.getTasksDone = this.getTasksDone.bind(this);\n        this.refresh = this.refresh.bind(this);\n    }\n\n    componentDidMount() {\n        // this.getTasksTodo();\n        // this.getTasksInProgress();\n        // this.getTasksDone();\n        Service.getTasks()\n            .then((result) => {\n                const tasks = result.data;\n                console.log(tasks);\n                this.setState({tasks});\n            })   \n    }\n\n    refresh() {\n        this.componentDidMount();\n    }\n\n    // getTasksTodo() {\n    //     Service.getTasksTodo()\n    //         .then((result) => {\n    //             const taskstodo = result.data;\n    //             console.log(taskstodo)\n    //             this.setState({taskstodo});\n    //         })\n    // }\n\n    // getTasksInProgress() {\n    // Service.getTasksInProgress()\n    //     .then((result) => {\n    //         const tasksinprogress = result.data;\n    //         console.log(tasksinprogress)\n    //         this.setState({tasksinprogress});\n    //     })\n    // }\n\n    // getTasksDone() {\n    //     Service.getTasksDone()\n    //         .then((result) => {\n    //             const tasksdone = result.data;\n    //             console.log(tasksdone)\n    //             this.setState({tasksdone}); \n    //         })\n    // }\n    \n    todoTaskList = (tasks) => {\n        // console.log(tasks)\n        return tasks.filter(task => task.taskState === \"TODO\");\n    }\n\n    inprogressTaskList = (tasks) => {\n        return tasks.filter(task => task.taskState === \"INPROGRESS\");\n    }\n\n    doneTaskList = (tasks) => {\n        return tasks.filter(task => task.taskState === \"DONE\");\n    }\n\n    deleteTask(taskId) {\n        Service.deleteTask(taskId)\n            .then(respose => {this.refresh()})\n    }\n\n    changePriorityColor = (priority) => {\n        return priority === 'HIGHT'? \"badge badge-danger float-right\": \n                priority === 'LOW'? \"badge badge-success float-right\": \"badge badge-warning float-right\";\n    }\n\n    search = (tasks) => {\n        console.log(tasks);\n            this.setState({tasks});  \n    }\n\n    updateInprogress(taskId) {\n        Service.updateTaskInprogress(taskId)\n            .then(response => {this.refresh()})\n    }\n\n    updateDone(taskId) {\n        Service.updateTaskDone(taskId)\n            .then(response => {this.refresh()})\n    }\n\n    updateTodo(taskId) {\n        Service.updateTaskTodo(taskId)\n            .then(response => {this.refresh()})\n    }\n\n    refreshTasks = () => {\n        window.location.reload(false);\n    };\n\n    render() {\n        return (\n            <div className=\"content-container\">\n                <TaskSearch search={this.search}  />\n                \n                <h3 className=\"text-center header mt-3 mb-3\">Tasks</h3>\n                    <div className=\"card-deck\">\n                        {/* TO DO List */}\n                        <div className=\"card\">\n                            <div className=\"card-header bg-danger text-center\">\n                                TODO\n                            </div>\n                            <div className=\"card-body\">\n                                {/* {this.state.taskstodo.map(task =>  */}\n                                {this.todoTaskList(this.state.tasks).map(task =>\n                                <div className=\"card border-danger mb-3 card-size\" key={task.taskId}>\n                                    <div className=\"card-header bg-transparent border-danger text-danger\">\n                                        <b>#{task.taskId}</b>\n                                        <span className={this.changePriorityColor(task.taskPriority)}>{task.taskPriority}</span>\n                                    </div>\n                                    <div className=\"card-body text-danger\">\n                                        <h5 className=\"card-title\">{task.taskTitle}</h5>\n                                        <p className=\"card-text\">Project Title: <b>{task.project.projectTitle}</b></p>\n                                        <p className=\"card-text\">{task.taskDescription}</p>\n                                    </div>\n                                    <div className=\"btn-display\">\n                                        <button className=\"btn btn-info btn-size\" \n                                            onClick={() => this.deleteTask(task.taskId)}><FaTrashAlt />\n                                        </button>\n                                       \n                                        <UpdateTaskList task={task} refresh={this.refresh}/>\n                                        <button className=\"btn btn-info mt-3 mb-3 ml-2 mr-2\" \n                                            onClick={() => this.updateInprogress(task.taskId)}>\n                                            INPROGRESS\n                                        </button>\n                                    </div>\n                                </div>\n                                )}\n                            </div>     \n                        </div>\n\n                        {/* IN PROGRESS list */}\n                        <div className=\"card\">\n                            <div className=\"card-header bg-warning text-center\">\n                                INPROGRESS\n                            </div>\n                            <div className=\"card-body\">\n                                {/* {this.state.tasksinprogress.map(task =>  */}\n                                {this.inprogressTaskList(this.state.tasks).map(task =>\n                                <div className=\"card border-warning mb-3 card-size\" key={task.taskId}>\n                                    <div className=\"card-header bg-transparent border-warning text-warning\">\n                                        <b>#{task.taskId}</b>\n                                        <span className={this.changePriorityColor(task.taskPriority)}>{task.taskPriority}</span>\n                                    </div>\n                                        <div className=\"card-body text-warning\">\n                                            <h5 className=\"card-title\">{task.taskTitle}</h5>\n                                            <p className=\"card-text\">Project Title: <b>{task.project.projectTitle}</b></p>\n                                            <p className=\"card-text\">{task.taskDescription}</p>\n                                        </div>\n                                        <div className=\"btn-display\">    \n                                            <button className=\"btn btn-info btn-size\" \n                                                onClick={() => this.deleteTask(task.taskId)}><FaTrashAlt />\n                                            </button>\n                                            <UpdateTaskList task={task} refresh={this.refresh} />\n                                            <button className=\"btn btn-info mt-3 mb-3 ml-2 mr-2\" \n                                            onClick={() => this.updateDone(task.taskId)}>\n                                                DONE\n                                            </button>\n                                        </div>       \n                                </div>\n                                )}\n                            </div>\n                        </div>\n                        {/* DONE List */}\n                        <div className=\"card\">\n                            <div className=\"card-header bg-success text-center\">\n                                DONE\n                            </div>\n                            <div className=\"card-body\">\n                                {/* {this.state.tasksdone.map(task => */}\n                                {this.doneTaskList(this.state.tasks).map(task => \n                                <div className=\"card border-success mb-3 card-size\" key={task.taskId}>\n                                    <div className=\"card-header bg-transparent border-success text-success\">\n                                        <b>#{task.taskId}</b>\n                                        <span className={this.changePriorityColor(task.taskPriority)}>{task.taskPriority}</span>\n                                    </div>\n                                    <div className=\"card-body text-success\">\n                                        <h5 className=\"card-title\">{task.taskTitle}</h5>\n                                        <p className=\"card-text\">Project Title: <b>{task.project.projectTitle}</b></p>\n                                        <p className=\"card-text\">{task.taskDescription}</p>\n                                    </div>\n                                    <div className=\"btn-display\">\n                                        <button className=\"btn btn-info btn-size\" \n                                            onClick={() => this.deleteTask(task.taskId)}><FaTrashAlt />\n                                        </button>\n                                        <UpdateTaskList task={task} refresh={this.refresh} />\n                                        <button className=\"btn btn-info mt-3 mb-3 ml-2 mr-2\" \n                                        onClick={() => this.updateTodo(task.taskId)}>\n                                            TODO\n                                        </button>\n                                    </div>\n                                </div>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n            </div> \n        )        \n    }          \n\n}\nexport default TasksList","import React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport ProjectsList from './component/ProjectsList';\nimport NewProject from './component/NewProject';\nimport Main from './component/Main';\nimport SideNav from './component/SideNav';\nimport TopNav from './component/TopNav';\nimport Project from './component/Project';\nimport UpdateProject from './component/UpdateProject';\nimport AddTask from './component/AddTask';\nimport TasksList from './component/TasksList';\n\nclass App extends Component {\n\n    render() {\n        return (\n          <div>\n              <SideNav />\n              <TopNav />\n                <Switch>\n                    <Route path=\"/\" exact component={Main} />\n                    <Route path=\"/api/main\" exact component={Main} />\n                    <Route path=\"/api/projects\" exact component={ProjectsList} />\n                    <Route path=\"/api/projects/new\" exact component={NewProject} />\n                    <Route path=\"/api/projects/tasks\" exact component={TasksList} />\n                    <Route path=\"/api/projects/:projectId\" exact component={Project} />\n                    <Route path=\"/api/projects/update/:projectId\" exact component={UpdateProject} />\n                    <Route path=\"/api/projects/:projectId/tasks/new\" exact component={AddTask} />\n                    \n                    \n                </Switch>\n          </div>\n        )\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <Router>\n    <App />\n    </Router>,\n    // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}